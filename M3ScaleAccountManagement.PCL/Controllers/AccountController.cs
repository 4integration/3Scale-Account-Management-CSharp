/*
 * M3ScaleAccountManagement.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/17/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using M3ScaleAccountManagement.PCL;
using M3ScaleAccountManagement.PCL.Http.Request;
using M3ScaleAccountManagement.PCL.Http.Response;
using M3ScaleAccountManagement.PCL.Http.Client;
using M3ScaleAccountManagement.PCL.Exceptions;
using M3ScaleAccountManagement.PCL.Models;

namespace M3ScaleAccountManagement.PCL.Controllers
{
    public partial class AccountController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static AccountController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static AccountController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new AccountController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Returns a developer account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetAdminApiAccountsXmlById(string accessToken, int id)
        {
            Task<dynamic> t = GetAdminApiAccountsXmlByIdAsync(accessToken, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a developer account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAdminApiAccountsXmlByIdAsync(string accessToken, int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{id}.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Associates credit card tokens and billing address to an account. This operation is only required if you use your own credit card capture method. These tokens are the ones required by Authorize.net, ogone, braintree, payment express and merchant e solutions
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="creditCardToken">Required parameter: Example: </param>
        /// <param name="creditCardExpirationYear">Required parameter: Example: </param>
        /// <param name="creditCardExpirationMonth">Required parameter: Example: </param>
        /// <param name="billingAddressName">Required parameter: Example: </param>
        /// <param name="billingAddressAddress">Required parameter: Example: </param>
        /// <param name="billingAddressCity">Required parameter: Example: </param>
        /// <param name="billingAddressCountry">Required parameter: Example: </param>
        /// <param name="creditCardAuthorizeNetPaymentProfileToken">Optional parameter: Example: </param>
        /// <param name="billingAddressState">Optional parameter: Example: </param>
        /// <param name="billingAddressPhone">Optional parameter: Example: </param>
        /// <param name="billingAddressZip">Optional parameter: Example: </param>
        /// <param name="creditCardPartialNumber">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsCreditCardXmlById(
                string accessToken,
                int id,
                string creditCardToken,
                string creditCardExpirationYear,
                string creditCardExpirationMonth,
                string billingAddressName,
                string billingAddressAddress,
                string billingAddressCity,
                string billingAddressCountry,
                string creditCardAuthorizeNetPaymentProfileToken = null,
                string billingAddressState = null,
                string billingAddressPhone = null,
                string billingAddressZip = null,
                string creditCardPartialNumber = null)
        {
            Task<dynamic> t = UpdateAdminApiAccountsCreditCardXmlByIdAsync(accessToken, id, creditCardToken, creditCardExpirationYear, creditCardExpirationMonth, billingAddressName, billingAddressAddress, billingAddressCity, billingAddressCountry, creditCardAuthorizeNetPaymentProfileToken, billingAddressState, billingAddressPhone, billingAddressZip, creditCardPartialNumber);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Associates credit card tokens and billing address to an account. This operation is only required if you use your own credit card capture method. These tokens are the ones required by Authorize.net, ogone, braintree, payment express and merchant e solutions
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="creditCardToken">Required parameter: Example: </param>
        /// <param name="creditCardExpirationYear">Required parameter: Example: </param>
        /// <param name="creditCardExpirationMonth">Required parameter: Example: </param>
        /// <param name="billingAddressName">Required parameter: Example: </param>
        /// <param name="billingAddressAddress">Required parameter: Example: </param>
        /// <param name="billingAddressCity">Required parameter: Example: </param>
        /// <param name="billingAddressCountry">Required parameter: Example: </param>
        /// <param name="creditCardAuthorizeNetPaymentProfileToken">Optional parameter: Example: </param>
        /// <param name="billingAddressState">Optional parameter: Example: </param>
        /// <param name="billingAddressPhone">Optional parameter: Example: </param>
        /// <param name="billingAddressZip">Optional parameter: Example: </param>
        /// <param name="creditCardPartialNumber">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsCreditCardXmlByIdAsync(
                string accessToken,
                int id,
                string creditCardToken,
                string creditCardExpirationYear,
                string creditCardExpirationMonth,
                string billingAddressName,
                string billingAddressAddress,
                string billingAddressCity,
                string billingAddressCountry,
                string creditCardAuthorizeNetPaymentProfileToken = null,
                string billingAddressState = null,
                string billingAddressPhone = null,
                string billingAddressZip = null,
                string creditCardPartialNumber = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{id}/credit_card.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "credit_card_token", creditCardToken },
                { "credit_card_expiration_year", creditCardExpirationYear },
                { "credit_card_expiration_month", creditCardExpirationMonth },
                { "billing_address_name", billingAddressName },
                { "billing_address_address", billingAddressAddress },
                { "billing_address_city", billingAddressCity },
                { "billing_address_country", billingAddressCountry },
                { "credit_card_authorize_net_payment_profile_token", creditCardAuthorizeNetPaymentProfileToken },
                { "billing_address_state", billingAddressState },
                { "billing_address_phone", billingAddressPhone },
                { "billing_address_zip", billingAddressZip },
                { "credit_card_partial_number", creditCardPartialNumber }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Sends a message to the account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CreateAdminApiAccountsMessagesXmlByAccountId(string accessToken, int accountId, string body)
        {
            Task<dynamic> t = CreateAdminApiAccountsMessagesXmlByAccountIdAsync(accessToken, accountId, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Sends a message to the account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateAdminApiAccountsMessagesXmlByAccountIdAsync(string accessToken, int accountId, string body)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/messages.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "body", body }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns the account plan associated to an account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetAdminApiAccountsPlanXmlByAccountId(string accessToken, int accountId)
        {
            Task<dynamic> t = GetAdminApiAccountsPlanXmlByAccountIdAsync(accessToken, accountId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns the account plan associated to an account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAdminApiAccountsPlanXmlByAccountIdAsync(string accessToken, int accountId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/plan.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Resets the state of the account to pending so that it can be approved or rejected again.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsMakePendingXmlById(string accessToken, int id)
        {
            Task<dynamic> t = UpdateAdminApiAccountsMakePendingXmlByIdAsync(accessToken, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Resets the state of the account to pending so that it can be approved or rejected again.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsMakePendingXmlByIdAsync(string accessToken, int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{id}/make_pending.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Rejects the account (changes the state to rejected). An account can be rejected after creation, the workflow for account creation can have a validation process that ends in approving or rejecting the account submission. The state can also be updated by PUT on /admin/api/accounts/{id}.xml
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsRejectXmlById(string accessToken, int id)
        {
            Task<dynamic> t = UpdateAdminApiAccountsRejectXmlByIdAsync(accessToken, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Rejects the account (changes the state to rejected). An account can be rejected after creation, the workflow for account creation can have a validation process that ends in approving or rejecting the account submission. The state can also be updated by PUT on /admin/api/accounts/{id}.xml
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsRejectXmlByIdAsync(string accessToken, int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{id}/reject.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Approves the account (changes the state to live). Accounts need to be approved explicitly via this API after creation. The state can also be updated by PUT on /admin/api/accounts/{id}.xml
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsApproveXmlById(string accessToken, int id)
        {
            Task<dynamic> t = UpdateAdminApiAccountsApproveXmlByIdAsync(accessToken, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Approves the account (changes the state to live). Accounts need to be approved explicitly via this API after creation. The state can also be updated by PUT on /admin/api/accounts/{id}.xml
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsApproveXmlByIdAsync(string accessToken, int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{id}/approve.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Changes the account plan for the developer account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="planId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsChangePlanXmlById(string accessToken, int id, int planId)
        {
            Task<dynamic> t = UpdateAdminApiAccountsChangePlanXmlByIdAsync(accessToken, id, planId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Changes the account plan for the developer account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="planId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsChangePlanXmlByIdAsync(string accessToken, int id, int planId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{id}/change_plan.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "plan_id", planId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns your account.
        /// </summary>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetAdminApiProviderXml()
        {
            Task<dynamic> t = GetAdminApiProviderXmlAsync();
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns your account.
        /// </summary>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAdminApiProviderXmlAsync()
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/provider.xml");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Deletes a developer account. Deleting an account removes all users, applications and service subscriptions to the account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic DeleteAdminApiAccountsXmlById(string accessToken, int id)
        {
            Task<dynamic> t = DeleteAdminApiAccountsXmlByIdAsync(accessToken, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Deletes a developer account. Deleting an account removes all users, applications and service subscriptions to the account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> DeleteAdminApiAccountsXmlByIdAsync(string accessToken, int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{id}.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Updates a developer account by ID. You can modify all the fields on the account, including custom fields defined in the fields definition section of your admin portal.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="orgName">Optional parameter: Example: </param>
        /// <param name="additionalFields">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsXmlById(
                string accessToken,
                int id,
                string orgName = null,
                object additionalFields = null)
        {
            Task<dynamic> t = UpdateAdminApiAccountsXmlByIdAsync(accessToken, id, orgName, additionalFields);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Updates a developer account by ID. You can modify all the fields on the account, including custom fields defined in the fields definition section of your admin portal.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="orgName">Optional parameter: Example: </param>
        /// <param name="additionalFields">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsXmlByIdAsync(
                string accessToken,
                int id,
                string orgName = null,
                object additionalFields = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{id}.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "org_name", orgName },
                { "additional_fields", additionalFields }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Find an account by the username or email of its users (username takes precendence over email).
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="username">Optional parameter: Example: </param>
        /// <param name="email">Optional parameter: Example: </param>
        /// <param name="userId">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetAdminApiAccountsFindXml(
                string accessToken,
                string username = null,
                string email = null,
                int? userId = null)
        {
            Task<dynamic> t = GetAdminApiAccountsFindXmlAsync(accessToken, username, email, userId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Find an account by the username or email of its users (username takes precendence over email).
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="username">Optional parameter: Example: </param>
        /// <param name="email">Optional parameter: Example: </param>
        /// <param name="userId">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAdminApiAccountsFindXmlAsync(
                string accessToken,
                string username = null,
                string email = null,
                int? userId = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/find.xml");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "username", username },
                { "email", email },
                { "user_id", userId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns the list of developer accounts (the accounts that consume your API). Filters by state are available and the results can be paginated.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="state">Optional parameter: Example: </param>
        /// <param name="page">Optional parameter: Example: </param>
        /// <param name="perPage">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetAdminApiAccountsXml(
                string accessToken,
                StateEnum? state = null,
                int? page = null,
                int? perPage = null)
        {
            Task<dynamic> t = GetAdminApiAccountsXmlAsync(accessToken, state, page, perPage);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns the list of developer accounts (the accounts that consume your API). Filters by state are available and the results can be paginated.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="state">Optional parameter: Example: </param>
        /// <param name="page">Optional parameter: Example: </param>
        /// <param name="perPage">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAdminApiAccountsXmlAsync(
                string accessToken,
                StateEnum? state = null,
                int? page = null,
                int? perPage = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts.xml");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "state", (state.HasValue) ? StateEnumHelper.ToValue(state.Value) : null },
                { "page", page },
                { "per_page", perPage }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Removes all credit card info of an account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic DeleteAdminApiAccountsCreditCardXmlById(string accessToken, int id)
        {
            Task<dynamic> t = DeleteAdminApiAccountsCreditCardXmlByIdAsync(accessToken, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Removes all credit card info of an account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> DeleteAdminApiAccountsCreditCardXmlByIdAsync(string accessToken, int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{id}/credit_card.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 