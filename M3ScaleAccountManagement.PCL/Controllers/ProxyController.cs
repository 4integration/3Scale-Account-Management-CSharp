/*
 * M3ScaleAccountManagement.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/17/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using M3ScaleAccountManagement.PCL;
using M3ScaleAccountManagement.PCL.Http.Request;
using M3ScaleAccountManagement.PCL.Http.Response;
using M3ScaleAccountManagement.PCL.Http.Client;
using M3ScaleAccountManagement.PCL.Exceptions;
using M3ScaleAccountManagement.PCL.Models;

namespace M3ScaleAccountManagement.PCL.Controllers
{
    public partial class ProxyController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static ProxyController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static ProxyController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new ProxyController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Changes the Proxy settings.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="serviceId">Required parameter: Example: </param>
        /// <param name="endpoint">Optional parameter: Example: </param>
        /// <param name="credentialsLocation">Optional parameter: Example: </param>
        /// <param name="authAppKey">Optional parameter: Example: </param>
        /// <param name="authAppId">Optional parameter: Example: </param>
        /// <param name="authUserKey">Optional parameter: Example: </param>
        /// <param name="errorAuthFailed">Optional parameter: Example: </param>
        /// <param name="errorStatusAuthFailed">Optional parameter: Example: </param>
        /// <param name="errorHeadersAuthFailed">Optional parameter: Example: </param>
        /// <param name="errorAuthMissing">Optional parameter: Example: </param>
        /// <param name="errorStatusAuthMissing">Optional parameter: Example: </param>
        /// <param name="errorHeadersAuthMissing">Optional parameter: Example: </param>
        /// <param name="errorNoMatch">Optional parameter: Example: </param>
        /// <param name="errorStatusNoMatch">Optional parameter: Example: </param>
        /// <param name="errorHeadersNoMatch">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiServicesProxyXmlByServiceId(
                string accessToken,
                int serviceId,
                string endpoint = null,
                string credentialsLocation = null,
                string authAppKey = null,
                string authAppId = null,
                string authUserKey = null,
                string errorAuthFailed = null,
                int? errorStatusAuthFailed = null,
                string errorHeadersAuthFailed = null,
                string errorAuthMissing = null,
                int? errorStatusAuthMissing = null,
                string errorHeadersAuthMissing = null,
                string errorNoMatch = null,
                int? errorStatusNoMatch = null,
                string errorHeadersNoMatch = null)
        {
            Task<dynamic> t = UpdateAdminApiServicesProxyXmlByServiceIdAsync(accessToken, serviceId, endpoint, credentialsLocation, authAppKey, authAppId, authUserKey, errorAuthFailed, errorStatusAuthFailed, errorHeadersAuthFailed, errorAuthMissing, errorStatusAuthMissing, errorHeadersAuthMissing, errorNoMatch, errorStatusNoMatch, errorHeadersNoMatch);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Changes the Proxy settings.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="serviceId">Required parameter: Example: </param>
        /// <param name="endpoint">Optional parameter: Example: </param>
        /// <param name="credentialsLocation">Optional parameter: Example: </param>
        /// <param name="authAppKey">Optional parameter: Example: </param>
        /// <param name="authAppId">Optional parameter: Example: </param>
        /// <param name="authUserKey">Optional parameter: Example: </param>
        /// <param name="errorAuthFailed">Optional parameter: Example: </param>
        /// <param name="errorStatusAuthFailed">Optional parameter: Example: </param>
        /// <param name="errorHeadersAuthFailed">Optional parameter: Example: </param>
        /// <param name="errorAuthMissing">Optional parameter: Example: </param>
        /// <param name="errorStatusAuthMissing">Optional parameter: Example: </param>
        /// <param name="errorHeadersAuthMissing">Optional parameter: Example: </param>
        /// <param name="errorNoMatch">Optional parameter: Example: </param>
        /// <param name="errorStatusNoMatch">Optional parameter: Example: </param>
        /// <param name="errorHeadersNoMatch">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiServicesProxyXmlByServiceIdAsync(
                string accessToken,
                int serviceId,
                string endpoint = null,
                string credentialsLocation = null,
                string authAppKey = null,
                string authAppId = null,
                string authUserKey = null,
                string errorAuthFailed = null,
                int? errorStatusAuthFailed = null,
                string errorHeadersAuthFailed = null,
                string errorAuthMissing = null,
                int? errorStatusAuthMissing = null,
                string errorHeadersAuthMissing = null,
                string errorNoMatch = null,
                int? errorStatusNoMatch = null,
                string errorHeadersNoMatch = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/services/{service_id}/proxy.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "service_id", serviceId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "endpoint", endpoint },
                { "credentials_location", credentialsLocation },
                { "auth_app_key", authAppKey },
                { "auth_app_id", authAppId },
                { "auth_user_key", authUserKey },
                { "error_auth_failed", errorAuthFailed },
                { "error_status_auth_failed", errorStatusAuthFailed },
                { "error_headers_auth_failed", errorHeadersAuthFailed },
                { "error_auth_missing", errorAuthMissing },
                { "error_status_auth_missing", errorStatusAuthMissing },
                { "error_headers_auth_missing", errorHeadersAuthMissing },
                { "error_no_match", errorNoMatch },
                { "error_status_no_match", errorStatusNoMatch },
                { "error_headers_no_match", errorHeadersNoMatch }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Patch(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns the Proxy of a Service.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="serviceId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetAdminApiServicesProxyXmlByServiceId(string accessToken, int serviceId)
        {
            Task<dynamic> t = GetAdminApiServicesProxyXmlByServiceIdAsync(accessToken, serviceId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns the Proxy of a Service.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="serviceId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAdminApiServicesProxyXmlByServiceIdAsync(string accessToken, int serviceId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/services/{service_id}/proxy.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "service_id", serviceId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 