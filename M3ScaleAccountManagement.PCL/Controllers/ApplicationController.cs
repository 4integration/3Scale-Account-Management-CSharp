/*
 * M3ScaleAccountManagement.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/17/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using M3ScaleAccountManagement.PCL;
using M3ScaleAccountManagement.PCL.Http.Request;
using M3ScaleAccountManagement.PCL.Http.Response;
using M3ScaleAccountManagement.PCL.Http.Client;
using M3ScaleAccountManagement.PCL.Exceptions;
using M3ScaleAccountManagement.PCL.Models;

namespace M3ScaleAccountManagement.PCL.Controllers
{
    public partial class ApplicationController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static ApplicationController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static ApplicationController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new ApplicationController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Create an application. The application object can be extended with Fields Definitions in the Admin Portal where you can add/remove fields, for instance token (string), age (int), third name (string optional), etc.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="planId">Required parameter: Example: </param>
        /// <param name="name">Required parameter: Example: </param>
        /// <param name="description">Required parameter: Example: </param>
        /// <param name="userKey">Optional parameter: Example: </param>
        /// <param name="applicationId">Optional parameter: Example: </param>
        /// <param name="applicationKey">Optional parameter: Example: </param>
        /// <param name="additionalFields">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CreateAdminApiAccountsApplicationsXml(
                string accessToken,
                int accountId,
                int planId,
                string name,
                string description,
                string userKey = null,
                string applicationId = null,
                string applicationKey = null,
                object additionalFields = null)
        {
            Task<dynamic> t = CreateAdminApiAccountsApplicationsXmlAsync(accessToken, accountId, planId, name, description, userKey, applicationId, applicationKey, additionalFields);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create an application. The application object can be extended with Fields Definitions in the Admin Portal where you can add/remove fields, for instance token (string), age (int), third name (string optional), etc.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="planId">Required parameter: Example: </param>
        /// <param name="name">Required parameter: Example: </param>
        /// <param name="description">Required parameter: Example: </param>
        /// <param name="userKey">Optional parameter: Example: </param>
        /// <param name="applicationId">Optional parameter: Example: </param>
        /// <param name="applicationKey">Optional parameter: Example: </param>
        /// <param name="additionalFields">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateAdminApiAccountsApplicationsXmlAsync(
                string accessToken,
                int accountId,
                int planId,
                string name,
                string description,
                string userKey = null,
                string applicationId = null,
                string applicationKey = null,
                object additionalFields = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "plan_id", planId },
                { "name", name },
                { "description", description },
                { "user_key", userKey },
                { "application_id", applicationId },
                { "application_key", applicationKey },
                { "additional_fields", additionalFields }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Resume a suspended application. Once a suspended application is resumed it will be authorized on API requests.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsApplicationsResumeXml(string accessToken, int accountId, int id)
        {
            Task<dynamic> t = UpdateAdminApiAccountsApplicationsResumeXmlAsync(accessToken, accountId, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Resume a suspended application. Once a suspended application is resumed it will be authorized on API requests.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsApplicationsResumeXmlAsync(string accessToken, int accountId, int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{id}/resume.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Suspends an application (changes the state to suspended). Suspending an application will stop the application from authorizing API requests.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsApplicationsSuspendXml(string accessToken, int accountId, int id)
        {
            Task<dynamic> t = UpdateAdminApiAccountsApplicationsSuspendXmlAsync(accessToken, accountId, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Suspends an application (changes the state to suspended). Suspending an application will stop the application from authorizing API requests.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsApplicationsSuspendXmlAsync(string accessToken, int accountId, int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{id}/suspend.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Accepts an application (changes the state to live). Once the state is live the application can be used on API requests.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsApplicationsAcceptXml(string accessToken, int accountId, int id)
        {
            Task<dynamic> t = UpdateAdminApiAccountsApplicationsAcceptXmlAsync(accessToken, accountId, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Accepts an application (changes the state to live). Once the state is live the application can be used on API requests.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsApplicationsAcceptXmlAsync(string accessToken, int accountId, int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{id}/accept.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Deletes the customized application plan of the application. After removing the customization the application will be constrained by the original application plan.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsApplicationsDecustomizePlanXml(string accessToken, int accountId, int id)
        {
            Task<dynamic> t = UpdateAdminApiAccountsApplicationsDecustomizePlanXmlAsync(accessToken, accountId, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Deletes the customized application plan of the application. After removing the customization the application will be constrained by the original application plan.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsApplicationsDecustomizePlanXmlAsync(string accessToken, int accountId, int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{id}/decustomize_plan.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Creates a customized application plan for the application.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsApplicationsCustomizePlanXml(string accessToken, int accountId, int id)
        {
            Task<dynamic> t = UpdateAdminApiAccountsApplicationsCustomizePlanXmlAsync(accessToken, accountId, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Creates a customized application plan for the application.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsApplicationsCustomizePlanXmlAsync(string accessToken, int accountId, int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{id}/customize_plan.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Changes the application plan of an application.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="planId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsApplicationsChangePlanXml(
                string accessToken,
                int accountId,
                int id,
                int planId)
        {
            Task<dynamic> t = UpdateAdminApiAccountsApplicationsChangePlanXmlAsync(accessToken, accountId, id, planId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Changes the application plan of an application.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="planId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsApplicationsChangePlanXmlAsync(
                string accessToken,
                int accountId,
                int id,
                int planId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{id}/change_plan.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "plan_id", planId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Updates an application. All fields of the application object can be updated except the id and the app_id (when using OAuth or app_id/app_key authentication pattern).
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="name">Optional parameter: Example: </param>
        /// <param name="description">Optional parameter: Example: </param>
        /// <param name="additionalFields">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic UpdateAdminApiAccountsApplicationsXml(
                string accessToken,
                int accountId,
                int id,
                string name = null,
                string description = null,
                object additionalFields = null)
        {
            Task<dynamic> t = UpdateAdminApiAccountsApplicationsXmlAsync(accessToken, accountId, id, name, description, additionalFields);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Updates an application. All fields of the application object can be updated except the id and the app_id (when using OAuth or app_id/app_key authentication pattern).
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="name">Optional parameter: Example: </param>
        /// <param name="description">Optional parameter: Example: </param>
        /// <param name="additionalFields">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateAdminApiAccountsApplicationsXmlAsync(
                string accessToken,
                int accountId,
                int id,
                string name = null,
                string description = null,
                object additionalFields = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{id}.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "name", name },
                { "description", description },
                { "additional_fields", additionalFields }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns the application by id.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetAdminApiAccountsApplicationsXml(string accessToken, int accountId, int id)
        {
            Task<dynamic> t = GetAdminApiAccountsApplicationsXmlAsync(accessToken, accountId, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns the application by id.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAdminApiAccountsApplicationsXmlAsync(string accessToken, int accountId, int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{id}.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns the list of application of an account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetAdminApiAccountsApplicationsXml(string accessToken, int accountId)
        {
            Task<dynamic> t = GetAdminApiAccountsApplicationsXmlAsync(accessToken, accountId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns the list of application of an account.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAdminApiAccountsApplicationsXmlAsync(string accessToken, int accountId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Deletes a referrer filter of an application. Referrer filters limit API requests by domain or IP ranges.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="applicationId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic DeleteAdminApiAccountsApplicationsReferrerFiltersIdXml(
                string accessToken,
                int accountId,
                int applicationId,
                int id)
        {
            Task<dynamic> t = DeleteAdminApiAccountsApplicationsReferrerFiltersIdXmlAsync(accessToken, accountId, applicationId, id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Deletes a referrer filter of an application. Referrer filters limit API requests by domain or IP ranges.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="applicationId">Required parameter: Example: </param>
        /// <param name="id">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> DeleteAdminApiAccountsApplicationsReferrerFiltersIdXmlAsync(
                string accessToken,
                int accountId,
                int applicationId,
                int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{application_id}/referrer_filters/{id}.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "application_id", applicationId },
                { "id", id }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Adds a referrer filter to an application. Referrer filters limit API requests by domain or IP ranges.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="applicationId">Required parameter: Example: </param>
        /// <param name="referrerFilter">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CreateAdminApiAccountsApplicationsReferrerFiltersXml(
                string accessToken,
                int accountId,
                int applicationId,
                string referrerFilter)
        {
            Task<dynamic> t = CreateAdminApiAccountsApplicationsReferrerFiltersXmlAsync(accessToken, accountId, applicationId, referrerFilter);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Adds a referrer filter to an application. Referrer filters limit API requests by domain or IP ranges.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="applicationId">Required parameter: Example: </param>
        /// <param name="referrerFilter">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateAdminApiAccountsApplicationsReferrerFiltersXmlAsync(
                string accessToken,
                int accountId,
                int applicationId,
                string referrerFilter)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{application_id}/referrer_filters.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "application_id", applicationId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "referrer_filter", referrerFilter }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Lists referrer filters of the application.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="applicationId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetAdminApiAccountsApplicationsReferrerFiltersXml(string accessToken, int accountId, int applicationId)
        {
            Task<dynamic> t = GetAdminApiAccountsApplicationsReferrerFiltersXmlAsync(accessToken, accountId, applicationId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Lists referrer filters of the application.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="applicationId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAdminApiAccountsApplicationsReferrerFiltersXmlAsync(string accessToken, int accountId, int applicationId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{application_id}/referrer_filters.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "application_id", applicationId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Deletes a key of an application (valid only on the authentication mode app_id/app_key or oauth). An application may have to have at least one app_key (controlled by settings).
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="applicationId">Required parameter: Example: </param>
        /// <param name="key">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic DeleteAdminApiAccountsApplicationsKeysKeyXml(
                string accessToken,
                int accountId,
                int applicationId,
                string key)
        {
            Task<dynamic> t = DeleteAdminApiAccountsApplicationsKeysKeyXmlAsync(accessToken, accountId, applicationId, key);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Deletes a key of an application (valid only on the authentication mode app_id/app_key or oauth). An application may have to have at least one app_key (controlled by settings).
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="applicationId">Required parameter: Example: </param>
        /// <param name="key">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> DeleteAdminApiAccountsApplicationsKeysKeyXmlAsync(
                string accessToken,
                int accountId,
                int applicationId,
                string key)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{application_id}/keys/{key}.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "application_id", applicationId },
                { "key", key }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Adds a key of an application (valid only on the authentication mode app_id/app_key or oauth). There are maximum 5 app_keys per application.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="applicationId">Required parameter: Example: </param>
        /// <param name="key">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CreateKeyCreate(
                string accessToken,
                int accountId,
                int applicationId,
                string key)
        {
            Task<dynamic> t = CreateKeyCreateAsync(accessToken, accountId, applicationId, key);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Adds a key of an application (valid only on the authentication mode app_id/app_key or oauth). There are maximum 5 app_keys per application.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="applicationId">Required parameter: Example: </param>
        /// <param name="key">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateKeyCreateAsync(
                string accessToken,
                int accountId,
                int applicationId,
                string key)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{application_id}/keys.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "application_id", applicationId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "key", key }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Lists app keys of the application.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="applicationId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetAdminApiAccountsApplicationsKeysXml(string accessToken, int accountId, int applicationId)
        {
            Task<dynamic> t = GetAdminApiAccountsApplicationsKeysXmlAsync(accessToken, accountId, applicationId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Lists app keys of the application.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="applicationId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAdminApiAccountsApplicationsKeysXmlAsync(string accessToken, int accountId, int applicationId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/accounts/{account_id}/applications/{application_id}/keys.xml");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "account_id", accountId },
                { "application_id", applicationId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Finds an application by keys used on the integration of your API and 3scale's Service Management API or by application ID.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="applicationId">Optional parameter: Example: </param>
        /// <param name="userKey">Optional parameter: Example: </param>
        /// <param name="appId">Optional parameter: Example: </param>
        /// <param name="serviceId">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetAdminApiApplicationsFindXml(
                string accessToken,
                int? applicationId = null,
                string userKey = null,
                string appId = null,
                string serviceId = null)
        {
            Task<dynamic> t = GetAdminApiApplicationsFindXmlAsync(accessToken, applicationId, userKey, appId, serviceId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Finds an application by keys used on the integration of your API and 3scale's Service Management API or by application ID.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="applicationId">Optional parameter: Example: </param>
        /// <param name="userKey">Optional parameter: Example: </param>
        /// <param name="appId">Optional parameter: Example: </param>
        /// <param name="serviceId">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAdminApiApplicationsFindXmlAsync(
                string accessToken,
                int? applicationId = null,
                string userKey = null,
                string appId = null,
                string serviceId = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/applications/find.xml");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "application_id", applicationId },
                { "user_key", userKey },
                { "app_id", appId },
                { "service_id", serviceId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns the list of applications across all services. Note that applications are scoped by service and can be paginated.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="page">Optional parameter: Example: </param>
        /// <param name="perPage">Optional parameter: Example: </param>
        /// <param name="activeSince">Optional parameter: Example: </param>
        /// <param name="inactiveSince">Optional parameter: Example: </param>
        /// <param name="serviceId">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetApplications(
                string accessToken,
                int? page = null,
                int? perPage = null,
                string activeSince = null,
                string inactiveSince = null,
                string serviceId = null)
        {
            Task<dynamic> t = GetApplicationsAsync(accessToken, page, perPage, activeSince, inactiveSince, serviceId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns the list of applications across all services. Note that applications are scoped by service and can be paginated.
        /// </summary>
        /// <param name="accessToken">Required parameter: Example: </param>
        /// <param name="page">Optional parameter: Example: </param>
        /// <param name="perPage">Optional parameter: Example: </param>
        /// <param name="activeSince">Optional parameter: Example: </param>
        /// <param name="inactiveSince">Optional parameter: Example: </param>
        /// <param name="serviceId">Optional parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetApplicationsAsync(
                string accessToken,
                int? page = null,
                int? perPage = null,
                string activeSince = null,
                string inactiveSince = null,
                string serviceId = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/admin/api/applications.xml");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "access_token", accessToken },
                { "page", page },
                { "per_page", perPage },
                { "active_since", activeSince },
                { "inactive_since", inactiveSince },
                { "service_id", serviceId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 